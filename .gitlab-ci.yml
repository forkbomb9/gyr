variables:
  CARGO_HOME: cargo_home
  APT_CACHE_DIR: apt-cache

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - target/
    - apt-cache/
    # Cache cargo downloads (see
    # https://doc.rust-lang.org/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci)
    - cargo_home/bin/
    - cargo_home/registry/index/
    - cargo_home/registry/cache/
    - cargo_home/git/db/

stages:
  - test
  - release

before_script:
  - export CARGO_HOME=$PWD/cargo_home
  - mkdir -pv $CARGO_HOME

test:
  image: "rust:latest"
  stage: test
  before_script:
    - rustc --version
    - cargo --version
    - export PATH="$CARGO_HOME/bin:$PATH"
  script:
    - cargo check
    - cargo test

.build_template: &release
  image: "rust:latest"
  stage: release
  #  Don't mark pipelines as blocked
  allow_failure: true
  when: manual
  before_script:
    - rustc --version
    - cargo --version
    - if [[ -n "$EXTRA_PACKAGES" ]]; then
          mkdir -pv $APT_CACHE_DIR &&
          apt-get -qq update &&
          apt-get -o dir::cache::archives="$APT_CACHE_DIR" -qq -y install $EXTRA_PACKAGES; fi
    - if [[ -n "$CARGO_CONFIG" ]]; then mkdir .cargo/ && echo -e "$CARGO_CONFIG" > .cargo/config; fi
    - export PATH="$CARGO_HOME/bin:$PATH"
    - rustup target add $TARGET
  script:
    - cargo build --release --target=$TARGET

x86_64-unknown-linux-musl:
  <<: *release
  variables:
    TARGET: x86_64-unknown-linux-musl
    EXTRA_PACKAGES: "musl-tools"
  artifacts:
    paths:
      - target/x86_64-unknown-linux-musl/release/gyr

aarch64-unknown-linux-musl:
  <<: *release
  variables:
    TARGET: aarch64-unknown-linux-musl
    EXTRA_PACKAGES: "gcc-aarch64-linux-gnu \
        binutils-aarch64-linux-gnu \
        libc6-arm64-cross \
        libc6-dev-arm64-cross \
        musl-tools"
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: "aarch64-linux-gnu-gcc"
  artifacts:
    paths:
      - target/aarch64-unknown-linux-musl/release/gyr

# 'arm' covers both armv6 and v7, but without v7 optimizations
arm-unknown-linux-musleabi:
  <<: *release
  variables:
    TARGET: arm-unknown-linux-musleabi
    EXTRA_PACKAGES: "gcc-arm-linux-gnueabi \
        binutils-arm-linux-gnueabi \
        libc6-arm-cross \
        libc6-dev-arm-cross"
    CARGO_TARGET_ARM_UNKNOWN_LINUX_MUSLEABI_LINKER: "arm-linux-gnueabi-gcc"
  artifacts:
    paths:
      - target/arm-unknown-linux-musleabihf/release/gyr

arm-unknown-linux-musleabihf:
  <<: *release
  variables:
    TARGET: arm-unknown-linux-musleabihf
    EXTRA_PACKAGES: "gcc-arm-linux-gnueabihf \
        binutils-arm-linux-gnueabihf \
        libc6-armhf-cross \
        libc6-dev-armhf-cross"
    CARGO_TARGET_ARM_UNKNOWN_LINUX_MUSLEABIHF_LINKER: "arm-linux-gnueabihf-gcc"
  artifacts:
    paths:
      - target/arm-unknown-linux-musleabihf/release/gyr

armv7-unknown-linux-musleabihf:
  <<: *release
  variables:
    TARGET: armv7-unknown-linux-musleabihf
    EXTRA_PACKAGES: "gcc-arm-linux-gnueabihf \
        binutils-arm-linux-gnueabihf \
        libc6-armhf-cross \
        libc6-dev-armhf-cross"
    CARGO_TARGET_ARMV7_UNKNOWN_LINUX_MUSLEABIHF_LINKER: "arm-linux-gnueabihf-gcc"
  artifacts:
    paths:
      - target/armv7-unknown-linux-musleabihf/release/gyr

# @TODO FreeBSD cross-compiling
# x86_64-unknown-freebsd:
#   <<: *release
#   variables:
#     TARGET: x86_64-unknown-freebsd
#   artifacts:
#     paths:
#       - target/x86_64-unknown-freebsd/release/gyr

# Minimum Rust version (@TODO)
# x86_64-unknown-linux-gnu-RUST_VERSION:
#   <<: *release
#   image: "rust:RUST_VERSION"
#   variables:
#     TARGET: x86_64-unknown-linux-gnu
#   artifacts:
#     paths:
#       - target/release/gyr
